#!/bin/bash

BOOTSTRAPPER=$1
VERSION=$2
NODENAME=$3
ROLE=$4
TOKEN=$5
NODE_IP=$6
URL=$7
KUBELET_LOG_LEVEL=$8

if [ "${NODENAME}" != "`hostname`" ]; then
  exit 0
fi

install_krew() {
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew

  export PATH=${KREW_ROOT:-$HOME/.krew}/bin:$PATH
}

echo "BOOTSTRAPPER: $BOOTSTRAPPER"
echo "ROLE: $ROLE"

case $BOOTSTRAPPER in
"k3s" )
  export INSTALL_K3S_VERSION=${VERSION}
  export K3S_TOKEN=${TOKEN}

  case $ROLE in
  "server" )
    #export INSTALL_K3S_EXEC="server --node-taint node-role.kubernetes.io/master=true:NoExecute --node-taint node-role.kubernetes.io/master=true:NoSchedule --flannel-backend=wireguard --kubelet-arg v=${KUBELET_LOG_LEVEL} --resolv-conf /etc/resolv.conf"
    #export INSTALL_K3S_EXEC="server --kube-controller-arg node-monitor-period=3s --kube-controller-arg node-monitor-grace-period=12s --node-taint node-role.kubernetes.io/master=true:NoExecute --node-taint node-role.kubernetes.io/master=true:NoSchedule --kubelet-arg v=${KUBELET_LOG_LEVEL} --resolv-conf /etc/resolv.conf"
    export INSTALL_K3S_EXEC="server --node-taint node-role.kubernetes.io/master=true:NoExecute --node-taint node-role.kubernetes.io/master=true:NoSchedule --kubelet-arg v=${KUBELET_LOG_LEVEL} --resolv-conf /etc/resolv.conf"
    # --disable local-storage
    #export INSTALL_K3S_EXEC="server --kubelet-arg v=${KUBELET_LOG_LEVEL} --resolv-conf /etc/resolv.conf"

    export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

    mkdir -p /etc/rancher/k3s
    curl -sfL https://get.k3s.io | sudo bash - 
    ;;
  "worker" )
    export K3S_URL=${URL}:6443
    export INSTALL_K3S_EXEC="--kubelet-arg v=${KUBELET_LOG_LEVEL} --resolv-conf /etc/resolv.conf"

    curl -sfL https://get.k3s.io | sh - 
    ;;
  *)
    exit 1
    ;;
  esac
  ;;
"rke2" )
  export INSTALL_RKE2_VERSION=${VERSION}
  export RKE2_TOKEN=${TOKEN}

  case $ROLE in
  "server" )
    export PATH=/var/lib/rancher/rke2/bin:$PATH
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    export CRI_CONFIG_FILE=/var/lib/rancher/rke2/agent/etc/crictl.yaml

    mkdir -p /etc/rancher/rke2

    cat <<EOF > /etc/rancher/rke2/config.yaml
token: ${RKE2_TOKEN}
node-external-ip: ${NODE_IP}
node-ip: ${NODE_IP}
kubelet-arg: "v=${KUBELET_LOG_LEVEL}"
resolv-conf: "/etc/resolv.conf"
EOF
    #export INSTALL_RKE2_EXEC="server --node-taint node-role.kubernetes.io/master=true:NoExecute --node-taint node-role.kubernetes.io/master=true:NoSchedule --kubelet-arg v=${KUBELET_LOG_LEVEL} --resolv-conf /etc/resolv.conf"
    xport INSTALL_RKE2_EXEC="server"

    curl -sfL https://get.rke2.io | INSTALL_RKE2_EXEC="${INSTALL_RKE2_EXEC}" INSTALL_RKE2_VERSION="${INSTALL_RKE2_VERSION}" sudo -E bash -
    systemctl enable rke2-server.service
    systemctl start rke2-server.service
    ;;
  "worker" )
    export RKE2_URL=${URL}:9345
    export INSTALL_RKE2_EXEC="--kubelet-arg v=${KUBELET_LOG_LEVEL}"

    mkdir -p /etc/rancher/rke2

    cat <<EOF > /etc/rancher/rke2/config.yaml
server: ${RKE2_URL}
token: ${RKE2_TOKEN}
node-external-ip: ${NODE_IP}
node-ip: ${NODE_IP}
kubelet-arg: "v=${KUBELET_LOG_LEVEL}"
resolv-conf: "/etc/resolv.conf"
EOF

    curl -sfL https://get.rke2.io | INSTALL_RKE2_TYPE="agent" INSTALL_RKE2_VERSION=${INSTALL_RKE2_VERSION} sh -
    systemctl enable rke2-agent.service
    systemctl start rke2-agent.service
    ;;
  *)
    exit 1
    ;;
  esac
  ;;
*)
  exit 1
  ;;
esac

if [ "$ROLE" = "server" ]; then
  install_krew

  echo "export PATH=$PATH" >> /root/.bashrc
  echo "export KUBECONFIG=$KUBECONFIG" >> /root/.bashrc
  echo "source <(kubectl completion bash)" >> /root/.bashrc
  echo "alias k='kubectl'" >> /root/.bashrc
  echo "complete -F __start_kubectl k" >> /root/.bashrc
  echo "alias kl='kubectl -n longhorn-system'" >> /root/.bashrc
  echo "complete -F __start_kubectl kl" >> /root/.bashrc
fi

echo "export CRI_CONFIG_FILE=$CRI_CONFIG_FILE" >> /root/.bashrc


